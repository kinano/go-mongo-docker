// This document shows the Payload used by GoLang/Mongo DB 
{
    // This is the Mongo Object id
    "objectId": "string",
    // If we ever move away from Ruby, having the user emails here may prove beneficial
    "userEmail": "string",
    "userId": "int",
    "tripName": "string",
    // In the next iteration, we can refactor bus sizes to a different data structure
    "busSize": "string", // Skedaddle - S, Skedaddle - M, Skedaddle - L,...etc
    // Ruby currently only supports two values: one_way, round_trip
    "tripType": "string",
    // "stops" key will substitute "locations" in Ruby
    // This design assumes we will not have more than a small amount of stops
    // Otherwise, scanning the array
    "stops": [{
        "id" :"ObjectId()",
        // The group name will be used to group stops (e.g. outboud, inbound, ..etc)
        "groupName": "string",
        // "leavesAt" can be mapped to routes["dateTime"] in Ruby
        "leavesAt": "dateTime",
        "arrivesAt": "dateTime",
        // Latitude and longitude will be GSI coordinate types
        "latitude": "float",
        "longitude": "float",
        "formattedAddress": "string",
        "timeZoneId": "string",
        "googlePlaceId": "string",
        // The following fields are merely for Ruby and can be killed in the future
        "timeZoneName": "string",
        "postalCode": "string",
        "state": "string",
        "city": "string",
        "streetAddress": "string"
    }],
    // "estimates" will replace "routes" in Ruby
    "estimates": [{
        // Distance in meters
        "distance": "int",
        // Duration in seconds
        "duration": "int",
        "fromStop": "ObjectId()",
        "toStop": "ObjectId()"
    }],
    // This will be a list of user ids or user emails (depends on how the split payments conversation goes)
    "organizers": ["int"],
    // This will help with split payments for a trip
    "payments": [{
        // Stripe customer token
        "customerToken": "string",
        // Stripe payment source
        "source": "string",
        "userId": "int"
    }],
    // The following keys are required by Ruby
    "riderCount": "int",
    // Kilometers
    "outboundDistance": "int",
    // Kilometers
    "inboundDistance":3000.1795762745564,
    "vehicleType":"string", // Example: "Skedaddle - S"
    "quantity": "int",
    "customerNote": "string"
}